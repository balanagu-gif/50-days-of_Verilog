// UART Transmitter
module uart_tx #(
    parameter CLK_FREQ = 50000000,    // system clock frequency
    parameter BAUD_RATE = 9600        // baud rate
)(
    input  wire clk,
    input  wire rst,
    input  wire tx_start,             // trigger to start transmission
    input  wire [7:0] tx_data,        // parallel data in
    output reg  tx,                   // serial output
    output reg  tx_busy               // high when transmitting
);

    // calculate clock divider for baud rate
    localparam integer BAUD_DIV = CLK_FREQ / BAUD_RATE;
    reg [$clog2(BAUD_DIV)-1:0] baud_cnt;
    reg baud_tick;

    // baud generator
    always @(posedge clk or posedge rst) begin
        if (rst) begin
            baud_cnt <= 0;
            baud_tick <= 0;
        end else if (baud_cnt == BAUD_DIV-1) begin
            baud_cnt <= 0;
            baud_tick <= 1;
        end else begin
            baud_cnt <= baud_cnt + 1;
            baud_tick <= 0;
        end
    end

    // UART TX FSM
    reg [3:0] bit_index;     // counts bits
    reg [9:0] tx_shift;      // start + data + stop

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            tx <= 1'b1;      // idle line high
            tx_busy <= 0;
            bit_index <= 0;
            tx_shift <= 10'b1111111111;
        end else begin
            if (tx_start && !tx_busy) begin
                // load shift register: start(0), data[7:0], stop(1)
                tx_shift <= {1'b1, tx_data, 1'b0};
                bit_index <= 0;
                tx_busy <= 1;
            end else if (tx_busy && baud_tick) begin
                tx <= tx_shift[0];
                tx_shift <= {1'b1, tx_shift[9:1]};
                bit_index <= bit_index + 1;
                if (bit_index == 9) begin
                    tx_busy <= 0;  // transmission done
                end
            end
        end
    end

endmodule
